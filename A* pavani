from heapq import heappush, heappop

def a_star_search(start, goal, graph, heuristic):
    open_set = []
    heappush(open_set, (0, start))
    came_from = {}
    g_score = {start: 0}
    
    while open_set:
        current = heappop(open_set)[1]

        if current == goal:
            return reconstruct_path(came_from, current)

        for neighbor, cost in graph.get(current, []):
            tentative_g_score = g_score[current] + cost
            
            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score = tentative_g_score + heuristic(neighbor, goal)
                heappush(open_set, (f_score, neighbor))

    return None

def reconstruct_path(came_from, current):
    total_path = [current]
    while current in came_from:
        current = came_from[current]
        total_path.append(current)
    return total_path[::-1]

def manhattan_distance(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

# Dynamic input function
def dynamic_input(start, goal, edges):
    graph = {}
    for node_x, node_y, neighbor_x, neighbor_y, cost in edges:
        node = (node_x, node_y)
        neighbor = (neighbor_x, neighbor_y)
        if node not in graph:
            graph[node] = []
        graph[node].append((neighbor, cost))
    return start, goal, graph

# Example usage with dynamic inputs
start = (0, 0)
goal = (1, 1)
edges = [
    (0, 0, 0, 1, 1),
    (0, 0, 1, 0, 1),
    (0, 1, 1, 1, 1),
    (1, 0, 1, 1, 1)
]

start, goal, graph = dynamic_input(start, goal, edges)

# Perform A* search
path = a_star_search(start, goal, graph, manhattan_distance)
if path:
    print(f"Path found: {path}")
else:
    print("No path found.")
